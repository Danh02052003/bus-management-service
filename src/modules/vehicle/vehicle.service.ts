import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Vehicle } from './vehicle.entity';
import { Company } from '../company/company.entity';
import { Repository } from 'typeorm';
import { DTO_RP_Vehicle, DTO_RQ_Vehicle } from './vehicle.dto';

@Injectable()
export class VehicleService {
  constructor(
    @InjectRepository(Vehicle)
    private readonly vehicleRepository: Repository<Vehicle>,
    @InjectRepository(Company)
    private readonly companyRepository: Repository<Company>,
  ) {}

  // T·∫°o ph∆∞∆°ng ti·ªán m·ªõi
  // T·∫°o ph∆∞∆°ng ti·ªán m·ªõi
  async createVehicle(vehicle: DTO_RQ_Vehicle): Promise<DTO_RP_Vehicle> {
    try {
      console.log('üîπ [STEP 1] Received Data Vehicle from client:', vehicle);

      // Ki·ªÉm tra c√¥ng ty c√≥ t·ªìn t·∫°i kh√¥ng
      const existingCompany = await this.companyRepository.findOne({
        where: { id: vehicle.company_id },
      });
      if (!existingCompany) {
        console.error('‚ùå [ERROR] C√¥ng ty kh√¥ng t·ªìn t·∫°i:', vehicle.company_id);
        throw new HttpException(
          'D·ªØ li·ªáu c√¥ng ty kh√¥ng t·ªìn t·∫°i!',
          HttpStatus.NOT_FOUND,
        );
      }
      console.log('‚úÖ [STEP 2] Company found:', existingCompany.id);

      // Ki·ªÉm tra bi·ªÉn s·ªë xe ƒë√£ t·ªìn t·∫°i trong c√¥ng ty ch∆∞a
      const existingVehicle = await this.vehicleRepository.findOne({
        where: {
          license_plate: vehicle.license_plate,
          company_id: vehicle.company_id,
        },
      });
      if (existingVehicle) {
        console.error(
          `‚ùå [ERROR] Bi·ªÉn s·ªë ${vehicle.license_plate} ƒë√£ t·ªìn t·∫°i trong c√¥ng ty ${vehicle.company_id}`,
        );
        throw new HttpException(
          `${vehicle.license_plate} ƒë√£ t·ªìn t·∫°i trong c√¥ng ty!`,
          HttpStatus.CONFLICT, // 409 Conflict
        );
      }
      console.log('‚úÖ [STEP 3] Bi·ªÉn s·ªë ch∆∞a t·ªìn t·∫°i, ti·∫øp t·ª•c t·∫°o xe...');

      // T·∫°o ph∆∞∆°ng ti·ªán m·ªõi
      const newVehicle = this.vehicleRepository.create({
        ...vehicle,
        company: existingCompany,
      });
      console.log('üîπ [STEP 4] Created vehicle entity (ch∆∞a l∆∞u):', newVehicle);

      // L∆∞u ph∆∞∆°ng ti·ªán v√†o database
      const savedVehicle = await this.vehicleRepository.save(newVehicle);
      console.log('‚úÖ [STEP 5] Vehicle saved to database:', savedVehicle.id);

      // Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√£ l∆∞u
      return {
        id: savedVehicle.id,
        license_plate: savedVehicle.license_plate,
        phone: savedVehicle.phone,
        brand: savedVehicle.brand,
        type: savedVehicle.type,
        color: savedVehicle.color,
        note: savedVehicle.note,
        registration_expiry: savedVehicle.registration_expiry
          ? savedVehicle.registration_expiry.toISOString()
          : null,
        insurance_expiry: savedVehicle.insurance_expiry
          ? savedVehicle.insurance_expiry.toISOString()
          : null,
        status: savedVehicle.status,
        created_at: savedVehicle.created_at.toISOString(),
      };
    } catch (error) {
      console.error('‚ùå [ERROR] L·ªói khi t·∫°o ph∆∞∆°ng ti·ªán:', error);
      throw new HttpException(
        'ƒê√£ x·∫£y ra l·ªói khi t·∫°o ph∆∞∆°ng ti·ªán!',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // L·∫•y danh s√°ch ph∆∞∆°ng ti·ªán theo c√¥ng ty
  async getVehicleByCompany(companyId: number): Promise<DTO_RP_Vehicle[]> {
    try {
      console.log('üîπ [STEP 1] Received Company ID:', companyId);
      const existingCompany = await this.companyRepository.findOne({
        where: { id: companyId },
      });
      if (!existingCompany) {
        console.error('‚ùå [ERROR] C√¥ng ty kh√¥ng t·ªìn t·∫°i:', companyId);
        throw new HttpException(
          'D·ªØ li·ªáu c√¥ng ty kh√¥ng t·ªìn t·∫°i!',
          HttpStatus.NOT_FOUND,
        );
      }
      console.log('‚úÖ [STEP 2] Company found:', existingCompany.id);
      const vehicles = await this.vehicleRepository.find({
        where: { company_id: companyId },
      });
      console.log('‚úÖ [STEP 3] Vehicles found:', vehicles.length);
      return vehicles.map((vehicle) => ({
        id: vehicle.id,
        license_plate: vehicle.license_plate,
        phone: vehicle.phone,
        brand: vehicle.brand,
        type: vehicle.type,
        color: vehicle.color,
        note: vehicle.note,
        registration_expiry: vehicle.registration_expiry
          ? vehicle.registration_expiry.toISOString()
          : null,
        insurance_expiry: vehicle.insurance_expiry
          ? vehicle.insurance_expiry.toISOString()
          : null,
        status: vehicle.status,
        created_at: vehicle.created_at.toISOString(),
      }));
    } catch (error) {
      console.error('‚ùå [ERROR] L·ªói khi l·∫•y danh s√°ch ph∆∞∆°ng ti·ªán:', error);
      throw new HttpException(
        'ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch ph∆∞∆°ng ti·ªán!',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // X√≥a ph∆∞∆°ng ti·ªán theo ID
  async deleteVehicle(id: number): Promise<void> {
    try {
      console.log('üîπ [STEP 1] Received Vehicle ID to delete:', id);
      const vehicle = await this.vehicleRepository.findOne({
        where: { id },
      });
      if (!vehicle) {
        console.error('‚ùå [ERROR] Ph∆∞∆°ng ti·ªán kh√¥ng t·ªìn t·∫°i:', id);
        throw new HttpException(
          'Ph∆∞∆°ng ti·ªán kh√¥ng t·ªìn t·∫°i!',
          HttpStatus.NOT_FOUND,
        );
      }
      console.log('‚úÖ [STEP 2] Vehicle found:', vehicle.id);

      // X√≥a ph∆∞∆°ng ti·ªán
      await this.vehicleRepository.delete(id);
      console.log('‚úÖ [STEP 3] Vehicle deleted successfully:', id);
    } catch (error) {
      console.error('‚ùå [ERROR] L·ªói khi x√≥a ph∆∞∆°ng ti·ªán:', error);
      throw new HttpException(
        'ƒê√£ x·∫£y ra l·ªói khi x√≥a ph∆∞∆°ng ti·ªán!',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // C·∫≠p nh·∫≠t ph∆∞∆°ng ti·ªán theo ID
  async updateVehicle(data: {
    id: number;
    data: DTO_RQ_Vehicle;
  }): Promise<DTO_RP_Vehicle> {
    try {
      const existingVehicle = await this.vehicleRepository.findOne({
        where: { id: data.id },
      });
      if (!existingVehicle) {
        console.error('‚ùå [ERROR] Ph∆∞∆°ng ti·ªán kh√¥ng t·ªìn t·∫°i:', data.id);
        throw new HttpException(
          'Ph∆∞∆°ng ti·ªán kh√¥ng t·ªìn t·∫°i!',
          HttpStatus.NOT_FOUND,
        );
      }

      await this.vehicleRepository.update(data.id, data.data);
      const updatedVehicle = await this.vehicleRepository.findOne({
        where: { id: data.id },
      });
      return {
        id: updatedVehicle.id,
        license_plate: updatedVehicle.license_plate,
        phone: updatedVehicle.phone,
        brand: updatedVehicle.brand,
        type: updatedVehicle.type,
        color: updatedVehicle.color,
        note: updatedVehicle.note,
        registration_expiry: updatedVehicle.registration_expiry
          ? updatedVehicle.registration_expiry.toISOString()
          : null,
        insurance_expiry: updatedVehicle.insurance_expiry
          ? updatedVehicle.insurance_expiry.toISOString()
          : null,
        status: updatedVehicle.status,
        created_at: updatedVehicle.created_at.toISOString(),
      };
    } catch (error) {
      console.error('‚ùå [ERROR] L·ªói khi c·∫≠p nh·∫≠t ph∆∞∆°ng ti·ªán:', error);
      throw new HttpException(
        'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t ph∆∞∆°ng ti·ªán!',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}
