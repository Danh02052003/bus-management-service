import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import { Repository } from 'typeorm';
import { Company } from '../company/company.entity';
import { DTO_RP_Route, DTO_RP_RouteName, DTO_RQ_Route } from './route.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { Route } from './route.entity';

@Injectable()
export class RouteService {
  constructor(
    @InjectRepository(Company)
    private readonly companyRepository: Repository<Company>,
    @InjectRepository(Route)
    private readonly routeRepository: Repository<Route>,
  ) {}

  async getRouteByCompanyId(id: number): Promise<DTO_RP_Route[]> {
    console.log('Received Company ID:', id);

    const existingCompany = await this.companyRepository.findOne({
      where: { id: id },
    });

    if (!existingCompany) {
      console.error('‚ùå [ERROR] C√¥ng ty kh√¥ng t·ªìn t·∫°i v·ªõi ID:', id);
      throw new HttpException(
        'D·ªØ li·ªáu c√¥ng ty kh√¥ng t·ªìn t·∫°i!',
        HttpStatus.BAD_REQUEST,
      );
    }

    const routes = await this.routeRepository.find({
      where: { company_id: id },
      order: { display_order: 'ASC' },
    });

    if (!routes || routes.length === 0) {
      return [];
    }
    const mappedRoute = routes.map((route) => {
      return {
        id: route.id,
        name: route.name,
        shorten_name: route.shorten_name,
        base_price: route.base_price,
        status: route.status,
        note: route.note,
        created_at: route.created_at.toISOString(),
      };
    });

    return mappedRoute;
  }

  async createRoute(route: DTO_RQ_Route): Promise<DTO_RP_Route> {
    try {
      // console.log('1. Received data:', JSON.stringify(route, null, 2));

      // Validate input
      if (!route.company_id || !route.name) {
        // console.log('2. Validation failed - missing required fields');
        throw new HttpException(
          'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc',
          HttpStatus.BAD_REQUEST,
        );
      }

      // console.log('3. Checking company exists...');
      const existingCompany = await this.companyRepository.findOne({
        where: { id: route.company_id },
      });
      // console.log('4. Company found:', existingCompany);

      if (!existingCompany) {
        // console.log('5. Company not found');
        throw new HttpException(
          'D·ªØ li·ªáu c√¥ng ty kh√¥ng t·ªìn t·∫°i!',
          HttpStatus.NOT_FOUND,
        );
      }

      // console.log('6. Checking duplicate route...');
      const existingRoute = await this.routeRepository.findOne({
        where: {
          name: route.name,
          company_id: route.company_id,
        },
      });
      // console.log('7. Existing route:', existingRoute);

      if (existingRoute) {
        // console.log('8. Duplicate route found');
        throw new HttpException(
          `${route.name} ƒë√£ t·ªìn t·∫°i trong c√¥ng ty!`,
          HttpStatus.BAD_REQUEST,
        );
      }

      // console.log('9. Getting max display order for company...');
      const maxDisplayOrder = await this.routeRepository
        .createQueryBuilder('route')
        .select('MAX(route.display_order)', 'max')
        .where('route.company_id = :companyId', { companyId: route.company_id })
        .getRawOne();

      const newDisplayOrder = (maxDisplayOrder.max || 0) + 1;
      // console.log('10. New display order:', newDisplayOrder);

      // console.log('11. Creating new route...');
      const newRoute = this.routeRepository.create({
        ...route,
        company: existingCompany,
        display_order: newDisplayOrder,
      });
      // console.log('12. New route object:', newRoute);

      // console.log('13. Saving to database...');
      const savedRoute = await this.routeRepository.save(newRoute);
      // console.log('14. Saved route:', savedRoute);

      return {
        id: savedRoute.id,
        name: savedRoute.name,
        shorten_name: savedRoute.shorten_name,
        base_price: savedRoute.base_price,
        status: savedRoute.status,
        note: savedRoute.note,
        created_at: savedRoute.created_at.toISOString(),
      };
    } catch (error) {
      throw new HttpException(
        'L·ªói h·ªá th·ªëng!',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  async updateRoute(id: number, data: DTO_RQ_Route): Promise<DTO_RP_Route> {
    console.log('Received data:', data);
    const existingRoute = await this.routeRepository.findOne({
      where: { id },
    });
    if (!existingRoute) {
      throw new HttpException(
        'D·ªØ li·ªáu tuy·∫øn ƒë∆∞·ªùng kh√¥ng t·ªìn t·∫°i!',
        HttpStatus.NOT_FOUND,
      );
    }
    const updatedRoute = await this.routeRepository.save({
      ...existingRoute,
      ...data,
      created_at: existingRoute.created_at,
    });
    return {
      id: updatedRoute.id,
      name: updatedRoute.name,
      shorten_name: updatedRoute.shorten_name,
      base_price: updatedRoute.base_price,
      status: updatedRoute.status,
      note: updatedRoute.note,
      created_at: updatedRoute.created_at.toISOString(),
    };
  }

  /// X√≥a tuy·∫øn ƒë∆∞·ªùng
  /// C·∫ßn x·ª≠ l√Ω th√™m display_order
  // V√≠ d·ª• c√≥ 3 tuy·∫øn ƒë∆∞·ªùng v·ªõi display_order l√† 1, 2, 3. X√≥a tuy·∫øn ƒë∆∞·ªùng 2
  // c·∫ßn c·∫≠p nh·∫≠t l·∫°i display_order c·ªßa c√°c tuy·∫øn ƒë∆∞·ªùng c√≤n l·∫°i th√†nh 1, 2. kh√¥ng c√≤n l√† 1,3 n·ªØa
  async deleteRoute(id: number): Promise<void> {
    const existingRoute = await this.routeRepository.findOne({
      where: { id },
    });
    if (!existingRoute) {
      throw new HttpException(
        'D·ªØ li·ªáu tuy·∫øn ƒë∆∞·ªùng kh√¥ng t·ªìn t·∫°i!',
        HttpStatus.NOT_FOUND,
      );
    }
    await this.routeRepository.delete(id);
  }

  async getRouteNameByCompanyId(id: number): Promise<DTO_RP_RouteName[]> {
    const existingCompany = await this.companyRepository.findOne({
      where: { id: id },
    });

    if (!existingCompany) {
      console.error('‚ùå [ERROR] C√¥ng ty kh√¥ng t·ªìn t·∫°i v·ªõi ID:', id);
      throw new HttpException(
        'D·ªØ li·ªáu c√¥ng ty kh√¥ng t·ªìn t·∫°i!',
        HttpStatus.BAD_REQUEST,
      );
    }

    const routes = await this.routeRepository.find({
      where: { company_id: id, status: true },
      order: { display_order: 'ASC' },
    });

    if (!routes || routes.length === 0) {
      return [];
    }
    const mappedRoute = routes.map((route) => {
      return {
        id: route.id,
        name: route.name,
      };
    });

    return mappedRoute;
  }

  async moveTopRoute(id: number): Promise<DTO_RP_Route[]> {
    console.log('üîç T√¨m tuy·∫øn c·∫ßn di chuy·ªÉn v·ªõi ID:', id);
  
    // 1. T√¨m tuy·∫øn c·∫ßn di chuy·ªÉn
    const routeToMove = await this.routeRepository.findOne({
      where: { id },
      relations: ['company'],
    });
  
    if (!routeToMove) {
      throw new HttpException('‚ùå Tuy·∫øn kh√¥ng t·ªìn t·∫°i', HttpStatus.NOT_FOUND);
    }
  
    // 2. L·∫•y t·∫•t c·∫£ tuy·∫øn c√πng c√¥ng ty (ƒë√£ s·∫Øp x·∫øp)
    let allRoutes = await this.routeRepository.find({
      where: { company: { id: routeToMove.company.id } },
      order: { display_order: 'ASC' },
    });
  
    console.log('üìã Danh s√°ch tr∆∞·ªõc khi di chuy·ªÉn:', allRoutes.map(r => ({ id: r.id, display_order: r.display_order })));
  
    // 3. Ki·ªÉm tra n·∫øu tuy·∫øn c·∫ßn di chuy·ªÉn c√≥ display_order nh·ªè nh·∫•t
    const minOrder = Math.min(...allRoutes.map(route => route.display_order));
    if (routeToMove.display_order === minOrder) {
      console.log('‚ö†Ô∏è Tuy·∫øn ƒë√£ ·ªü v·ªã tr√≠ ƒë·∫ßu ti√™n, kh√¥ng c·∫ßn di chuy·ªÉn.');
      return allRoutes.map(route => ({
        id: route.id,
        name: route.name,
        shorten_name: route.shorten_name,
        base_price: route.base_price,
        status: route.status,
        note: route.note,
        created_at: route.created_at.toISOString(),
      }));
    }
  
    // 4. T√¨m tuy·∫øn li·ªÅn k·ªÅ ph√≠a tr√™n (c√≥ display_order nh·ªè h∆°n g·∫ßn nh·∫•t)
    const previousRoute = allRoutes
      .filter(route => route.display_order < routeToMove.display_order)
      .reduce((prev, current) => (current.display_order > prev.display_order ? current : prev));
  
    // 5. Ho√°n ƒë·ªïi display_order
    const tempOrder = routeToMove.display_order;
    routeToMove.display_order = previousRoute.display_order;
    previousRoute.display_order = tempOrder;
  
    // 6. L∆∞u thay ƒë·ªïi
    await this.routeRepository.save([routeToMove, previousRoute]);
  
    // 7. L·∫•y danh s√°ch ƒë√£ c·∫≠p nh·∫≠t
    allRoutes = await this.routeRepository.find({
      where: { company: { id: routeToMove.company.id } },
      order: { display_order: 'ASC' },
    });
  
    console.log('üìã Danh s√°ch sau khi di chuy·ªÉn:', allRoutes.map(r => ({ id: r.id, display_order: r.display_order })));
  
    return allRoutes.map(route => ({
      id: route.id,
      name: route.name,
      shorten_name: route.shorten_name,
      base_price: route.base_price,
      status: route.status,
      note: route.note,
      created_at: route.created_at.toISOString(),
    }));
  }
  
}
